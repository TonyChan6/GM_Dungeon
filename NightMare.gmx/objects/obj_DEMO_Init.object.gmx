<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This object is purely for initialising the demo. The global variables
// will be used in the object "obj_BSP_Generate" and can be substitued in that 
// object for other values. To see what they represent, please see the create 
// event of the generator object. This object can be removed for your own games.

rm_w = 1024;
rm_h = 768;

global.splitSize = 5;
global.splitNum = 32;
global.tileSize = 16;
global.roomSkip = 0;

// draw_set_font(fnt_BSP_Arial);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Fake Event
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Demo controls.
if alarm[0] &lt; 0
{
alarm[0] = 5;
// Test room width
if mouse_x &gt; 16 &amp;&amp; mouse_x &lt; 48
    {
    if mouse_y &gt; 16 &amp;&amp; mouse_y &lt; 48
        {
        if rm_w &lt; 2048 rm_w += 32;
        }
    else if mouse_y &gt; 80 &amp;&amp; mouse_y &lt; 112
        {
        if rm_w &gt; 256 rm_w -= 32;
        }
    }

// Test room height
if mouse_x &gt; 80 &amp;&amp; mouse_x &lt; 112
    {
    if mouse_y &gt; 16 &amp;&amp; mouse_y &lt; 48
        {
        if rm_h &lt; 2048 rm_h += 32;
        }
    else if mouse_y &gt; 80 &amp;&amp; mouse_y &lt; 112
        {
        if rm_h &gt; 256 rm_h -= 32;
        }
    }

// Number of splits to generate
if mouse_x &gt; 144 &amp;&amp; mouse_x &lt; 172
    {
    if mouse_y &gt; 16 &amp;&amp; mouse_y &lt; 48
        {
        if global.splitNum &lt; 99 global.splitNum++;
        }
    else if mouse_y &gt; 80 &amp;&amp; mouse_y &lt; 112
        {
        if global.splitNum &gt; 2 global.splitNum--;
        }
    }

// Minimum width (in grid squares) of each split
if mouse_x &gt; 208 &amp;&amp; mouse_x &lt; 240
    {
    if mouse_y &gt; 16 &amp;&amp; mouse_y &lt; 48
        {
        if global.splitSize &lt; 128 global.splitSize++;
        }
    else if mouse_y &gt; 80 &amp;&amp; mouse_y &lt; 112
        {
        if global.splitSize &gt; 3 global.splitSize--;
        }
    }

// Number of rooms to skip (max is limited by the split number)
if mouse_x &gt; 272 &amp;&amp; mouse_x &lt; 304
    {
    if mouse_y &gt; 16 &amp;&amp; mouse_y &lt; 48
        {
        if global.roomSkip &lt; global.splitNum global.roomSkip++;
        }
    else if mouse_y &gt; 80 &amp;&amp; mouse_y &lt; 112
        {
        if global.roomSkip &gt; 0 global.roomSkip--;
        }
    }

// Number of rooms to skip (max is limited by the split number)
if mouse_x &gt; 336 &amp;&amp; mouse_x &lt; 368
    {
    if mouse_y &gt; 16 &amp;&amp; mouse_y &lt; 48
        {
        if global.tileSize &lt; 64 global.tileSize += 8;
        }
    else if mouse_y &gt; 80 &amp;&amp; mouse_y &lt; 112
        {
        if global.tileSize &gt; 8 global.tileSize -= 8;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the buttons for this demo
draw_set_halign(fa_center);

// room width
draw_sprite(spr_DEMO_Arrow, 0, 32, 32)
draw_text(32, 58, string(rm_w));
draw_sprite(spr_DEMO_Arrow, 1, 32, 96);
draw_text(32, 110, "Room#Width");

// room height
draw_sprite(spr_DEMO_Arrow, 0, 96, 32)
draw_text(96, 58, string(rm_h));
draw_sprite(spr_DEMO_Arrow, 1, 96, 96);
draw_text(96, 110, "Room#Height");

// number of room splits
draw_sprite(spr_DEMO_Arrow, 0, 160, 32)
draw_text(160, 58, string(global.splitNum));
draw_sprite(spr_DEMO_Arrow, 1, 160, 96);
draw_text(160, 110, "Split#Number");

// minimum split size
draw_sprite(spr_DEMO_Arrow, 0, 224, 32)
draw_text(224, 58, string(global.splitSize));
draw_sprite(spr_DEMO_Arrow, 1, 224, 96);
draw_text(224, 110, "Split#Size");

// number of rooms to skip
draw_sprite(spr_DEMO_Arrow, 0, 288, 32)
draw_text(288, 58, string(global.roomSkip));
draw_sprite(spr_DEMO_Arrow, 1, 288, 96);
draw_text(288, 110, "Room#Skip");

// tile size
draw_sprite(spr_DEMO_Arrow, 0, 352, 32)
draw_text(352, 58, string(global.tileSize));
draw_sprite(spr_DEMO_Arrow, 1, 352, 96);
draw_text(352, 110, "Tile#Size");

// mesage text
draw_text(room_width / 2, room_height / 2, "Welcome to the BSP random map generator!## Use the buttons shown above to prepeare your#map variables then press &lt;ENTER&gt; to generate your room.#
In the next room, you can regenrate the map by pressing &lt;SPACE&gt;#or you can return to this room by pressing &lt;ENTER&gt; again.##You can also Press &lt;BACKSPACE&gt; to generate a playable maze.");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set the room width and height for the next room
// and resize the window and app surface to suit

room_set_width(rm_CreateGrid, rm_w);
room_set_height(rm_CreateGrid, rm_h);
var ratio = rm_h / rm_w;
if ratio &gt;= 1
{
window_set_size(768 / ratio, 768);
}
else
{
window_set_size(1024, 1024 * ratio);
}
surface_resize(application_surface, rm_w, rm_h);
room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set the room width and height for the next room
// and resize the window and app surface to suit

room_set_width(rm_CreateGrid, rm_w);
room_set_height(rm_CreateGrid, rm_h);
var ratio = rm_h / rm_w;
if ratio &gt;= 1
{
window_set_size(768 / ratio, 768);
}
else
{
window_set_size(1024, 1024 * ratio);
}
surface_resize(application_surface, rm_w, rm_h);
room_goto(rm_Test);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
